openapi: 3.0.0
info:
  title: IAM
  version: 0.0.1
  contact:
    name: Groupe de Fer
    email: info@groupedefer.be
    url: unanimity.be
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  description: Use trash bin fill ratio information within a city to improve a basic citizen service.
servers:
  - url: 'http://localhost:8000'
paths:
  '/api/can/{id}/sync':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    post:
      summary: Synchronise an agent data with the system
      tags:
        - can
        - agent
      operationId: post-sync-can-id
      responses:
        '201':
          description: OK
        '406':
          description: Not acceptable
      description: 'Upload information concerning the {id} trash can'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sync'
  /api/cans:
    get:
      summary: The set of trash cans this server handles
      tags:
        - can
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                uniqueItems: false
                items:
                  $ref: '#/components/schemas/TrashCan'
              examples:
                Example 1:
                  value:
                    - id: string
                      longitude: 0
                      latitude: 0
                      publicKey: string
                      currentFill: string
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrashCan'
              examples:
                Example 1:
                  value:
                    - id: 5zzd896az2a3d5lferzze5ez8q2s1
                      longitude: 25.26
                      latitude: 12.58
                      publicKey: (...)
                      currentFill: 54 # percentage
      operationId: get-admin-cans
      description: Get all trash can information
    parameters: []
  '/api/can/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: The trash can data with a set of detailed samples
      tags:
        - can
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrashCan'
              examples:
                Example 1:
                  value:
                    id: string
                    longitude: 0
                    latitude: 0
                    publicKey: string
                    data:
                      - time: string
                        fillingRate: 0
      operationId: get-can-id-info
      description: Get all the available information about one trash bin
  '/api/admin/can/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    put:
      summary: Update a trash can information
      description: Update a trash can information
      operationId: put-admin-can-id
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/AccessUnauthorized'
        '404':
          description: Not Found
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCan'
            examples:
              Example 1:
                value:
                  id: string
                  longitude: 0
                  latitude: 0
                  publicKey: string
      tags:
        - admin
        - can
      parameters:
        - schema:
            type: string
          in: query
          name: id
          description: The id of the trash bin
    delete:
      summary: Delete a trash can from the system
      description: Delete a trash can from the system
      operationId: delete-admin-can-id
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/AccessUnauthorized'
        '404':
          description: Not found
      security:
        - bearerAuth: []
      tags:
        - admin
        - can
      parameters:
        - schema:
            type: string
          in: query
          name: id
          description: The id of the trash bin
  /api/admin/can:
    post:
      summary: Create a new trash can
      description: Create a new trash can
      operationId: post-admin-can
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                required:
                  - id
              examples:
                Example 1:
                  value:
                    id: string
        '401':
          $ref: '#/components/responses/AccessUnauthorized'
        '422':
          description: Unprocessable Entity (WebDAV)
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCan'
            examples:
              Example 1:
                value:
                  id: string
                  longitude: 0
                  latitude: 0
                  publicKey: string
      tags:
        - admin
        - can
  /api/auth/login:
    post:
      summary: Request for long-lived connection
      description: Request for long-lived connection
      operationId: post-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
              examples:
                Example 1:
                  value:
                    token: yboErluqOrjOXZII6x7SXih5VqckV5XW
        '401':
          $ref: '#/components/responses/InvalidIDs'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
            examples:
              Example 1:
                value:
                  username: john
                  password: secret
      tags:
        - auth
  /api/auth/logout:
    post:
      summary: End a long lived connection
      description: End a long lived connection
      operationId: post-api-auth-logout
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/RefreshUnauthorized'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutCredentials'
            examples:
              Example 1:
                value:
                  username: john
                  token: yboErluqOrjOXZII6x7SXih5VqckV5XW
      tags:
        - auth
  /api/auth/refresh:
    post:
      summary: Request for an access token
      description: Request for an access token
      operationId: post-api-auth-refresh
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorization'
              examples:
                Example 1:
                  value:
                    access: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJJQU0iLCJzdWIiOiJqb2huIiwiZXhwIjoxNjAzMjA3ODQzLCJuYmYiOjE2MDMyMDc1NDN9.Ux3X1YBOgnlTBdHyxyviMs37ud8nIb1Zt_SLe8Y-dwA
                    refresh: yboErluqOrjOXZII6x7SXih5VqckV5XW
                Example 2:
                  value:
                    access: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJJQU0iLCJzdWIiOiJqb2huIiwiZXhwIjoxNjAzMjA3ODQzLCJuYmYiOjE2MDMyMDc1NDN9.Ux3X1YBOgnlTBdHyxyviMs37ud8nIb1Zt_SLe8Y-dwA
                    refresh: r7J0W2gsgLVIec9VRUmI6dTgbMLZjdRJ
        '401':
          $ref: '#/components/responses/RefreshUnauthorized'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshCredentials'
            examples:
              Example 1:
                value:
                  username: john
                  token: yboErluqOrjOXZII6x7SXih5VqckV5XW
      tags:
        - auth
components:
  responses:
    InvalidIDs:
      description: Invalid username/password
    AccessUnauthorized:
      description: Access token is missing or invalid
    RefreshUnauthorized:
      description: Refresh token is missing or invalid
  schemas:
    TrashCan:
      title: TrashCan
      type: object
      description: TrashCan information
      properties:
        id:
          type: string
        longitude:
          type: number
        latitude:
          type: number
        publicKey:
          type: string
        signProtocol:
          type: string
        currentFill:
          type: number
        data:
          type: array
          items:
            $ref: '#/components/schemas/TrashCanSample'
      required:
        - id
        - signProtocol
    TrashCanSample:
      title: TrashCanSample
      type: object
      properties:
        time:
          type: string
        fillingRate:
          type: number
      required:
        - time
        - fillingRate
    LoginCredentials:
      title: LoginCredentials
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
      description: ''
    LogoutCredentials:
      title: LogoutCredentials
      type: object
      properties:
        username:
          type: string
        token:
          type: string
      required:
        - username
        - token
      description: The user username and current refresh token
    RefreshCredentials:
      title: RefreshCredentials
      type: object
      properties:
        username:
          type: string
        token:
          type: string
      required:
        - username
        - token
      description: The user usersame and current refresh token
    Authorization:
      title: Authorization
      type: object
      properties:
        access:
          type: string
        refresh:
          type: string
      required:
        - access
        - refresh
      description: 'The user access token, voucher of his authorization(s) and a possibly renewed refresh token.'
    NewCan:
      title: NewCan
      type: object
      properties:
        id:
          type: string
        longitude:
          type: number
        latitude:
          type: number
        publicKey:
          type: string
        signProtocol:
          type: string
      required:
        - id
        - signProtocol
    Sync:
      title: Sync
      type: object
      properties:
        signature:
          type: string
        data:
          $ref: '#/components/schemas/TrashCanSample'
      required:
        - signature
        - data
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
  - name: can
  - name: admin
  - name: auth
  - name: agent
